generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id String @id @default(cuid())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  givenName     String?
  familyName    String?
  locale        String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  posts        Post[]
  comments     Comment[]
  postLikes    PostLike[]
  commentLikes CommentLike[]

  username    String  @unique
  isOnboarded Boolean @default(false)

  @@unique([id, username])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String  @id @default(cuid())
  title       String  @db.VarChar(300)
  content     String  @db.MediumText
  slug        String  @default("")
  isPublished Boolean @default(false)
  isPrivate   Boolean @default(false)

  author         User   @relation(fields: [authorUsername], references: [username])
  authorUsername String @default("")

  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likes PostLike[]

  @@unique([authorUsername, slug])
  @@index([authorUsername])
}

model Comment {
  id      String  @id @default(cuid())
  content String? @db.Text

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  replies  Comment[] @relation("comment_children")
  parent   Comment?  @relation("comment_children", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likes CommentLike[]

  @@index([postId, authorId, parentId])
}

model PostLike {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@unique([postId, userId])
  @@index([postId, userId])
}

model CommentLike {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String

  @@unique([commentId, userId])
  @@index([commentId, userId])
}
